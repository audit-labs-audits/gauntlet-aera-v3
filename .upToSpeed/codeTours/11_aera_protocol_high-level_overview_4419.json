{
  "title": "1.1: Aera Protocol High-Level Overview",
  "id": "YZCHSbhaowFdl3t4QCf3XC8k+ICO4h88NvlvCwq94uk=",
  "originalId": 4419,
  "position": 1,
  "steps": [
    {
      "type": "textOnly",
      "description": "Welcome to a whirlwind tour of the Aera codebase. We will explore its major modules, key contracts, and design patterns.",
      "title": "",
      "id": "52675"
    },
    {
      "type": "highlight",
      "description": "The `README` introduces **Aera Protocol V3** with setup instructions, tooling, and links to autogenerated NatSpec docs.",
      "file": "README.md",
      "highlight": [
        {
          "start": 1,
          "end": 20
        }
      ],
      "title": "",
      "id": "52676"
    },
    {
      "type": "textOnly",
      "description": "The `src` directory splits into two modules:\n\n* `core`: fundamental vault logic, factories, fee engines, and access control\n* `periphery`: adapters, hooks, routing, and utility lenses",
      "title": "",
      "id": "52677"
    },
    {
      "type": "highlight",
      "description": "`BaseVault` declares core functionality for guardian-authorized, batched operations using Merkle proofs and hooks.",
      "file": "src/core/BaseVault.sol",
      "highlight": [
        {
          "start": 37,
          "end": 45
        }
      ],
      "title": "",
      "id": "52678"
    },
    {
      "type": "highlight",
      "description": "This first function is the main entrypoint for the vault. It allows guardians to submit a batch of encoded operations for execution.",
      "file": "src/core/interfaces/IBaseVault.sol",
      "highlight": [
        {
          "start": 94,
          "end": 101
        }
      ],
      "title": "",
      "id": "52679"
    },
    {
      "type": "highlight",
      "description": "`SingleDepositorVault` pulls **ERC-20 tokens** in `deposit`, ensures allowances return to zero, and sends them back in `withdraw`. Both require `requiresAuth`.",
      "file": "src/core/SingleDepositorVault.sol",
      "highlight": [
        {
          "start": 26,
          "end": 55
        }
      ],
      "title": "",
      "id": "52680"
    },
    {
      "type": "highlight",
      "description": "`MultiDepositorVault` mints ERC-20 share units in `enter` and burns them in `exit`, moving underlying tokens accordingly. Only the **provisioner** role may call these.",
      "file": "src/core/MultiDepositorVault.sol",
      "highlight": [
        {
          "start": 61,
          "end": 91
        }
      ],
      "title": "",
      "id": "52681"
    },
    {
      "type": "highlight",
      "description": "`SingleDepositorVaultFactory.create` uses `CREATE2` via a delegate call to deploy new single-depositor vaults with deterministic addresses.",
      "file": "src/core/SingleDepositorVaultFactory.sol",
      "highlight": [
        {
          "start": 41,
          "end": 49
        }
      ],
      "title": "",
      "id": "52682"
    },
    {
      "type": "highlight",
      "description": "`MultiDepositorVaultFactory.create` stores ERC-20 name/symbol in transient storage and deploys a multi-depositor vault via `CREATE2`.",
      "file": "src/core/MultiDepositorVaultFactory.sol",
      "highlight": [
        {
          "start": 63,
          "end": 72
        }
      ],
      "title": "",
      "id": "52683"
    },
    {
      "type": "highlight",
      "description": "`IFeeCalculator` defines `claimFees`, `claimProtocolFees`, and `previewFees` for vault and protocol fee models.",
      "file": "src/core/interfaces/IFeeCalculator.sol",
      "highlight": [
        {
          "start": 26,
          "end": 34
        }
      ],
      "title": "",
      "id": "52684"
    },
    {
      "type": "highlight",
      "description": "`BaseFeeCalculator.claimFees` accrues stored fees, capping each claim to the available balance and returning vault and protocol amounts.",
      "file": "src/core/BaseFeeCalculator.sol",
      "highlight": [
        {
          "start": 101,
          "end": 110
        }
      ],
      "title": "",
      "id": "52685"
    },
    {
      "type": "highlight",
      "description": "`DelayedFeeCalculator.registerVault` sets up a pending snapshot and enforces a dispute period before fees are finalized.",
      "file": "src/core/DelayedFeeCalculator.sol",
      "highlight": [
        {
          "start": 47,
          "end": 55
        }
      ],
      "title": "",
      "id": "52686"
    },
    {
      "type": "highlight",
      "description": "`IProvisioner.deposit` handles synchronous deposits into the multi-depositor vault, and `requestDeposit` queues async requests for solver settlement.",
      "file": "src/core/interfaces/IProvisioner.sol",
      "highlight": [
        {
          "start": 174,
          "end": 188
        }
      ],
      "title": "",
      "id": "52687"
    },
    {
      "type": "highlight",
      "description": "`IProvisioner.solveRequestsVault` lets authorized solvers batch-process requests using vault liquidity and collects solver tips.",
      "file": "src/core/interfaces/IProvisioner.sol",
      "highlight": [
        {
          "start": 294,
          "end": 302
        }
      ],
      "title": "",
      "id": "52688"
    },
    {
      "type": "highlight",
      "description": "The `Provisioner` constructor sets immutables `PRICE_FEE_CALCULATOR` and `MULTI_DEPOSITOR_VAULT`, showing integration with pricing and vault logic.",
      "file": "src/core/Provisioner.sol",
      "highlight": [
        {
          "start": 43,
          "end": 48
        }
      ],
      "title": "",
      "id": "52689"
    },
    {
      "type": "highlight",
      "description": "`ISubmitHooks` defines `beforeSubmit` and `afterSubmit`, allowing external contracts to intercept guardian `submit` calls.",
      "file": "src/core/interfaces/ISubmitHooks.sol",
      "highlight": [
        {
          "start": 11,
          "end": 19
        }
      ],
      "title": "",
      "id": "52690"
    },
    {
      "type": "highlight",
      "description": "`BaseSlippageHooks` enforces per-trade slippage and a daily loss cap in numeraire terms for each vault, configurable by the owner.",
      "file": "src/periphery/hooks/slippage/BaseSlippageHooks.sol",
      "highlight": [
        {
          "start": 39,
          "end": 46
        }
      ],
      "title": "",
      "id": "52691"
    },
    {
      "type": "highlight",
      "description": "`Executor.execute` runs an array of `OperationPayable` calls non-reentrantly, with subclass-defined authorization checks.",
      "file": "src/periphery/Executor.sol",
      "highlight": [
        {
          "start": 17,
          "end": 25
        }
      ],
      "title": "",
      "id": "52692"
    },
    {
      "type": "highlight",
      "description": "`Forwarder.execute` dispatches `TargetCalldata` calls after verifying fine-grained caller capabilities granted via `addCallerCapability`.",
      "file": "src/periphery/Forwarder.sol",
      "highlight": [
        {
          "start": 33,
          "end": 41
        }
      ],
      "title": "",
      "id": "52693"
    },
    {
      "type": "highlight",
      "description": "`MilkmanRouter.requestSell` transfers tokens from the vault, approves Milkman, and submits a swap request, enforcing allowance invariants.",
      "file": "src/periphery/MilkmanRouter.sol",
      "highlight": [
        {
          "start": 64,
          "end": 72
        }
      ],
      "title": "",
      "id": "52694"
    },
    {
      "type": "highlight",
      "description": "`OracleRegistry.addOracle` seeds a baseâ†’quote oracle entry and validates that it can price one base token to a non-zero quote.",
      "file": "src/periphery/OracleRegistry.sol",
      "highlight": [
        {
          "start": 69,
          "end": 76
        }
      ],
      "title": "",
      "id": "52695"
    },
    {
      "type": "highlight",
      "description": "`OracleRegistry.getQuote` lets vaults fetch price data via the canonical registry, conforming to **ERC-7726**.",
      "file": "src/periphery/OracleRegistry.sol",
      "highlight": [
        {
          "start": 198,
          "end": 204
        }
      ],
      "title": "",
      "id": "52696"
    },
    {
      "type": "highlight",
      "description": "`ComputeBaseVaultAddressLens.computeBaseVaultAddress` predicts a `BaseVault` address using `CREATE2` parameters and the factory address.",
      "file": "src/periphery/ComputeBaseVaultAddressLens.sol",
      "highlight": [
        {
          "start": 11,
          "end": 19
        }
      ],
      "title": "",
      "id": "52697"
    },
    {
      "type": "textOnly",
      "description": "Key design patterns seen:\n\n- **Factory** (transient storage + `CREATE2`)\n- **Strategy** (pluggable fee calculators)\n- **Hook** (submit, transfer, slippage)\n- Transient storage for init parameters\n- `CREATE2` address prediction\n\nNext deep dives: core types, auth, `BaseVault` internals, fee extensions, deployment, provisioner flows, periphery modules.",
      "title": "",
      "id": "52698"
    }
  ]
}